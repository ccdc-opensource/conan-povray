parameters:
  - name: python
    type: string
  - name: package
    type: string
  - name: package_version
    type: string
  - name: user
    type: string
  - name: channel
    type: string
  - name: profile
    type: string
  - name: custom_profile
    type: string
  - name: destination_repository
    type: string
  - name: macos_deployment_target
    type: string
    default: 'NOT VALID UNLESS SET, ONLY USED BY MACOS BUILDS'
  - name: windows_bash_path
    type: string
    default: 'NOT VALID UNLESS SET, ONLY USED BY WINDOWS BUILDS'
  - name: conan_logging_level
    type: string
    default: critical
  # see https://github.com/conan-io/conan/issues/6514
  - name: workaround_autotools_windows_debug_issue
    type: boolean
    default: false

steps:
- script: ${{ parameters.python }} -m pip install --upgrade conan
  displayName: 'Install conan'

# This hack is required to get some packages to build. Particularly the ones that
# require use of the msys2 package in a specific configurations. Microsoft hosted agents
# insert git paths that contain bash executables, which interfere with the process.
- task: PythonScript@0
  displayName: Get path without git paths
  inputs:
    scriptSource: 'inline'
    pythonInterpreter: ${{ parameters.python }}
    script: |
      import os
      path_without_git_bash = os.pathsep.join([ x for x in os.environ['PATH'].split(os.pathsep) if 'Git' not in x])
      print(f'##vso[task.setvariable variable=path_without_git_bash;]{path_without_git_bash}')
      print('Path without git paths:')
      for pi in path_without_git_bash.split(os.pathsep):
          print(f'  - {pi}')

- task: ArtifactoryGenericDownload@3
  displayName: 'Download configuration'
  inputs:
    connection: 'devops-ccdc-3rd-party'
    specSource: 'taskConfiguration'
    fileSpec: |
      {
        "files": [
          {
            "pattern": "ccdc-conan-metadata/common-3rdparty-config.zip",
            "target": "$(Pipeline.Workspace)/.conan/"
          }
        ]
      }
    failNoOp: true

- task: ArtifactoryConan@1
  displayName: 'Install configuration'
  inputs:
    conanCommand: 'Config Install'
    configSourceType: 'zip'
    configZipPath: '$(Pipeline.Workspace)/.conan/common-3rdparty-config.zip'
    conanUserHome: '$(Pipeline.Workspace)/.conan'
  env:
    CONAN_LOGGING_LEVEL: ${{ parameters.conan_logging_level }}

- task: ArtifactoryConan@1
  displayName: 'Use ccdc-3rdparty-conan'
  inputs:
    conanCommand: 'Add Remote'
    remoteName: 'ccdc-3rdparty-conan'
    artifactoryService: 'devops-ccdc-3rd-party'
    conanRepo: 'ccdc-3rdparty-conan'
    purgeExistingRemotes: true
    conanUserHome: '$(Pipeline.Workspace)/.conan'
  env:
    CONAN_LOGGING_LEVEL: ${{ parameters.conan_logging_level }}

- task: ArtifactoryConan@1
  displayName: 'Use public-conan-center'
  inputs:
    conanCommand: 'Add Remote'
    remoteName: 'public-conan-center'
    artifactoryService: 'devops-ccdc-3rd-party'
    conanRepo: 'public-conan-center'
    purgeExistingRemotes: false
    conanUserHome: '$(Pipeline.Workspace)/.conan'
  env:
    CONAN_LOGGING_LEVEL: ${{ parameters.conan_logging_level }}

- task: ArtifactoryConan@1
  displayName: 'Use public-conan-bincrafters'
  inputs:
    conanCommand: 'Add Remote'
    remoteName: 'public-conan-bincrafters'
    artifactoryService: 'devops-ccdc-3rd-party'
    conanRepo: 'public-conan-bincrafters'
    purgeExistingRemotes: false
    conanUserHome: '$(Pipeline.Workspace)/.conan'
  env:
    CONAN_LOGGING_LEVEL: ${{ parameters.conan_logging_level }}

- task: ArtifactoryConan@1
  displayName: 'Export ${{ parameters.package }}/${{ parameters.package_version }}@'
  inputs:
    conanCommand: 'Custom'
    customArguments: 'export . ${{ parameters.package_version }}@'
    buildName: '$(Build.DefinitionName)'
    buildNumber: '$(Build.BuildNumber)'
    conanUserHome: '$(Pipeline.Workspace)/.conan'
  env:
    CONAN_LOGGING_LEVEL: ${{ parameters.conan_logging_level }}

- task: ArtifactoryConan@1
  displayName: 'Create ${{ parameters.package }} in Release mode'
  inputs:
    conanCommand: 'Custom'
    # We build all missing packages, on purpose, dependencies must be tracked and obtained from the destination repository
    ${{ if contains(parameters.profile, 'windows') }}:
      customArguments: 'create . --profile ${{ parameters.profile }}-release --profile ${{ parameters.custom_profile }} --remote=${{ parameters.destination_repository }} --build missing -s build_type=Release'
    ${{ if not(contains(parameters.profile, 'windows')) }}:
      customArguments: 'create . --profile ${{ parameters.profile }} --profile ${{ parameters.custom_profile }} --remote=${{ parameters.destination_repository }} --build missing -s build_type=Release'
    buildName: '$(Build.DefinitionName)'
    buildNumber: '$(Build.BuildNumber)'
    conanUserHome: '$(Pipeline.Workspace)/.conan'
  ${{ if contains(parameters.profile, 'macos') }}:
    env:
      MACOSX_DEPLOYMENT_TARGET: '${{ parameters.macos_deployment_target }}'
      ARTIFACTORY_API_KEY: $(artifactory.api.key)
      CONAN_LOGGING_LEVEL: ${{ parameters.conan_logging_level }}
  ${{ if contains(parameters.profile, 'windows') }}:
    env:
      ${{ if not(contains(parameters.windows_bash_path, 'NOT VALID')) }}:
        CONAN_BASH_PATH: '${{ parameters.windows_bash_path }}'
      ARTIFACTORY_API_KEY: $(artifactory.api.key)
      PATH: '$(path_without_git_bash)'
      CONAN_LOGGING_LEVEL: ${{ parameters.conan_logging_level }}
  ${{ if or(contains(parameters.profile, 'ubuntu'), contains(parameters.profile, 'centos')) }}:
    env:
      ARTIFACTORY_API_KEY: $(artifactory.api.key)
      CONAN_LOGGING_LEVEL: ${{ parameters.conan_logging_level }}

- task: ArtifactoryConan@1
  displayName: 'Upload *'
  inputs:
    conanCommand: 'Upload'
    patternOrReference: '*'
    extraArguments: '--all --remote=${{ parameters.destination_repository }}'
    buildName: '$(Build.DefinitionName)'
    buildNumber: '$(Build.BuildNumber)'
    conanUserHome: '$(Pipeline.Workspace)/.conan'
  env:
    CONAN_LOGGING_LEVEL: ${{ parameters.conan_logging_level }}

